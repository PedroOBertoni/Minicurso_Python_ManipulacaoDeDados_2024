# -*- coding: utf-8 -*-
"""WorskshopUniFacef.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BCtB58uRzIEvCsh6KRKr5E_njRufFKFB

## Importando e instalando bibliotecas
"""

!pip -q install yellowbrick plotly

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import requests
import io

"""## Função Python que recebe um link do google drive e baixa um arquivo CSV e joga em um dataframe perdas"""

# prompt: gerar uma função python que lê um link do google drive baixando um arquivo CSV e jogando em um  dataframe perdas
# o parâmetro será um url

import pandas as pd
def read_csv_from_google_drive(url):
  """
  Reads a CSV file from a Google Drive sharing link and loads it into a pandas DataFrame.

  Args:
    url: The sharing link of the Google Drive file.

  Returns:
    A pandas DataFrame containing the data from the CSV file, or None if an error occurs.
  """
  try:
    # Extract the file ID from the sharing link
    file_id = url.split('/')[-2]
    # Create the download URL
    download_url = f'https://drive.google.com/uc?export=download&id={file_id}'
    # Download the file content
    response = requests.get(download_url)
    response.raise_for_status()  # Raise an HTTPError for bad responses (4xx or 5xx)
    # Read the content into a pandas DataFrame
    perdas = pd.read_csv(io.StringIO(response.text))
    return perdas
  except requests.exceptions.RequestException as e:
    print(f"Error downloading the file: {e}")
    return None
  except Exception as e:
    print(f"An unexpected error occurred: {e}")
    return None

"""## Link do Banco de Dados Utilizado"""

base_credit = read_csv_from_google_drive("https://drive.google.com/file/d/1KRa71DNNxtMpvM7yQo-YzF9C_z68BEw1/view?usp=drive_link")

"""## Exploração de Dados"""

base_credit

base_credit.describe()

base_credit[base_credit['income'] >= 69995.685578]

base_credit['default'].value_counts()

sns.countplot(x = base_credit['default'])

plt.hist(x = base_credit['loan'])

grafico = px.scatter_matrix(base_credit, dimensions=['age', 'income', 'loan'], color='default')

grafico.show()

base_credit[base_credit['age'] < 0]

base_credit2 = base_credit.drop(base_credit[base_credit['age'] < 0].index)
base_credit2

base_credit2[base_credit2['age'] < 0]

base_credit2[base_credit2['age'].isna()]

media = base_credit2['age'][~base_credit2['age'].isna()].mean()

base_credit2.loc[base_credit2['age'].isna(), 'age'] = media

"""## Divisão entre previsores e classe"""

X_credit = base_credit2.iloc[:,1:4].values ## :, significa que pega todas as linhas e o 1:4 siginifica as colunas selecionadas, o X_credit representa os previsores
X_credit

y_credit = base_credit2.iloc[:,4].values ## método
y_credit

from sklearn.preprocessing import StandardScaler

scaler_credit = StandardScaler()
X_credit = scaler_credit.fit_transform(X_credit) ## Aqui estamos escalonando os valores do X_credit (provisores)
X_credit

from sklearn.model_selection import train_test_split

X_credit_treinamento, X_credito_teste, y_credit_treinamento, y_credit_teste = train_test_split(X_credit, y_credit, test_size = 0.25, random_state = 0)

import pickle

with open('/content/credit.pkl', mode="ab") as f:
  pickle.dump([X_credit_treinamento, y_credit_treinamento, X_credito_teste, y_credit_teste], f)

X_credit_treinamento.shape, X_credito_teste.shape ## mostra a quantidade de registros (número da esquerda)

"""## Naive-Bayes"""

from sklearn.naive_bayes import GaussianNB

naive_credit_data = GaussianNB()
naive_credit_data.fit(X_credit_treinamento, y_credit_treinamento) ## base de treinamento a partir dos previsores X_credit_treinamento e y_credit_treinamento

previsoes = naive_credit_data.predict(X_credito_teste) ## Fazendo a previsão a partir dos previsores
previsoes

y_credit_teste

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print("Houve", accuracy_score(y_credit_teste, previsoes)*100, "% de acerto nas previsões da base teste a partir da base original")

from yellowbrick.classifier import ConfusionMatrix

cm = ConfusionMatrix(GaussianNB())
cm.fit(X_credit_treinamento, y_credit_treinamento)
cm.score(X_credito_teste, y_credit_teste)

print(classification_report(y_credit_teste, previsoes))